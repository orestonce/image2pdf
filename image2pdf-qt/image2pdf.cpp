#include "image2pdf.h"
/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void Go2cppFn_Image2PDF(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_GetStatus(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_EndConv(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_IsRequestStop(char* in, int inLen, char** out, int* outLen);

#ifdef __cplusplus
}
#endif


std::string Image2PDF(Image2PDF_Req in0){
	std::string in;
	{
		{
			uint32_t tmp11 = in0.FileList.size();
			char tmp12[4];
			tmp12[0] = (uint32_t(tmp11) >> 24) & 0xFF;
			tmp12[1] = (uint32_t(tmp11) >> 16) & 0xFF;
			tmp12[2] = (uint32_t(tmp11) >> 8) & 0xFF;
			tmp12[3] = (uint32_t(tmp11) >> 0) & 0xFF;
			in.append(tmp12, 4);
			for (uint32_t tmp13=0; tmp13 < tmp11; ++tmp13) {
				{
					uint32_t tmp14 = in0.FileList[tmp13].length();
					char tmp15[4];
					tmp15[0] = (uint32_t(tmp14) >> 24) & 0xFF;
					tmp15[1] = (uint32_t(tmp14) >> 16) & 0xFF;
					tmp15[2] = (uint32_t(tmp14) >> 8) & 0xFF;
					tmp15[3] = (uint32_t(tmp14) >> 0) & 0xFF;
					in.append(tmp15, 4);
					in.append(in0.FileList[tmp13]);
				}
			}
		}
		{
			uint32_t tmp16 = in0.PdfOut.length();
			char tmp17[4];
			tmp17[0] = (uint32_t(tmp16) >> 24) & 0xFF;
			tmp17[1] = (uint32_t(tmp16) >> 16) & 0xFF;
			tmp17[2] = (uint32_t(tmp16) >> 8) & 0xFF;
			tmp17[3] = (uint32_t(tmp16) >> 0) & 0xFF;
			in.append(tmp17, 4);
			in.append(in0.PdfOut);
		}
	}
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_Image2PDF((char *)in.data(), in.length(), &out, &outLen);
	std::string retValue;
	int outIdx = 0;
	{
		uint32_t tmp18 = 0;
		uint32_t tmp19 = uint32_t(uint8_t(out[outIdx+0]) << 24);
		uint32_t tmp20 = uint32_t(uint8_t(out[outIdx+1]) << 16);
		uint32_t tmp21 = uint32_t(uint8_t(out[outIdx+2]) << 8);
		uint32_t tmp22 = uint32_t(uint8_t(out[outIdx+3]) << 0);
		tmp18 = tmp19 | tmp20 | tmp21 | tmp22;
		outIdx+=4;
		retValue = std::string(out+outIdx, out+outIdx+tmp18);
		outIdx+=tmp18;
	}
	if (out != NULL) {
		free(out);
	}
	return retValue;
}

Status GetStatus(){
	std::string in;
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_GetStatus((char *)in.data(), in.length(), &out, &outLen);
	Status retValue;
	int outIdx = 0;
	{
		retValue.IsRunning = (bool) out[outIdx];
		outIdx++;
		{
			uint32_t tmp3 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp4 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp5 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp6 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			retValue.Percent = tmp3 | tmp4 | tmp5 | tmp6;
			outIdx+=4;
		}
	}
	if (out != NULL) {
		free(out);
	}
	return retValue;
}

void EndConv(){
	std::string in;
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_EndConv((char *)in.data(), in.length(), &out, &outLen);
	if (out != NULL) {
		free(out);
	}
}

bool IsRequestStop(){
	std::string in;
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_IsRequestStop((char *)in.data(), in.length(), &out, &outLen);
	bool retValue;
	int outIdx = 0;
	retValue = (bool) out[outIdx];
	outIdx++;
	if (out != NULL) {
		free(out);
	}
	return retValue;
}


// Qt:
#include <QMutexLocker>
#include <QtConcurrent/QtConcurrent>

RunOnUiThread::~RunOnUiThread()
{
    {
        QMutexLocker lk(&m_mutex);
        m_done = true;
        m_funcList.clear();
    }
    m_pool.clear();
    m_pool.waitForDone();
}

void RunOnUiThread::AddRunFnOn_OtherThread(std::function<void ()> fn)
{
    QMutexLocker lk(&m_mutex);
    if (m_done) {
        return;
    }
    QtConcurrent::run(&m_pool, fn);
}

void RunOnUiThread::slot_newFn()
{
    std::vector<std::function<void ()>> funcList;
    {
        QMutexLocker lk(&m_mutex);
        funcList.swap(m_funcList);
    }

    for(std::function<void ()>& fn : funcList)
    {
        if (IsDone()) { // 快速结束
            return;
        }
        fn();
    }
}

void RunOnUiThread::AddRunFnOn_UiThread(std::function<void ()> fn)
{
    {
        QMutexLocker lk(&m_mutex);
        if (m_done) {
            return;
        }
        m_funcList.push_back(fn);
    }

    QMetaObject::invokeMethod(this, "slot_newFn", Qt::QueuedConnection);
}

bool RunOnUiThread::IsDone()
{
    QMutexLocker lk(&m_mutex);
    return m_done;
}

#include <QTimer>
#include <QLabel>
#include <QWidget>
#include <QPropertyAnimation>
#include <QPainter>
#include <QScreen>
#include <QHBoxLayout>
#include <QGuiApplication>
#include <QApplication>

QString StringToRGBA(const QString &color);

Toast::Toast(QObject *parent) : QObject(parent)
{
    m_myWidget = new QWidget;
    m_myWidget->setFixedHeight(60);
    m_label = new QLabel;
    m_label->setFixedHeight(30);
    m_label->move(0,0);
    QFont ft;
    ft.setPointSize(10);
    m_label->setFont(ft);
    m_label->setAlignment(Qt::AlignCenter);
    m_label->setStyleSheet("color:white");
    m_myWidget->setStyleSheet("border: none;background-color:black;border-radius:10px");
    QHBoxLayout * la = new QHBoxLayout;
    la->addWidget(m_label);
    la->setContentsMargins(0,0,0,0);
    m_myWidget->setLayout(la);
    m_myWidget->hide();
    m_myWidget->setWindowFlags(Qt::FramelessWindowHint | Qt::Tool | Qt::WindowStaysOnTopHint);
    m_myWidget->setAttribute(Qt::WA_TranslucentBackground,true);
    m_timer = new QTimer();
    m_timer->setInterval(3000);
    connect(m_timer,SIGNAL(timeout()),this,SLOT(onTimerStayOut()));
}

Toast *Toast::Instance()
{
    static Toast instance;
    return &instance;
}

void Toast::setText(const QString &color,const QString &bgcolor,const int & mestime,const QString &text){
    QApplication::beep();
    QFontMetrics fm(m_label->font());
    int width = fm.boundingRect(text).width() + 30;
    m_myWidget->setFixedWidth(width);
    m_label->setFixedWidth(width);
    m_label->setText(text);
    QString style = QString("color:").append(StringToRGBA(color));
    m_label->setStyleSheet(style);

    m_myWidget->setStyleSheet(QString("border: none;border-radius:10px;")
                            .append("background-color:").append(StringToRGBA(bgcolor)));

    QSize deskSize = QGuiApplication::primaryScreen()->size();
    m_myWidget->move((deskSize.width() - m_myWidget->width()) / 2, (deskSize.height() - m_myWidget->height()) / 2);
    m_myWidget->show();
    m_timer->setInterval(mestime);
    m_timer->stop();
    m_timer->start();
}

void Toast::SetError(const QString &text,const int & mestime){
     setText("FFFFFF","FF0000",mestime,text);
}

void Toast::SetSuccess(const QString &text,const int & mestime){
     setText("000000","00FF00",mestime,text);
}

void Toast::SetWaring(const QString &text,const int & mestime){
     setText("FF0000","FFFF00",mestime,text);
}

void Toast::SetTips(const QString &text,const int & mestime){
     setText("FFFFFF","0080FF",mestime,text);
}

QString StringToRGBA(const QString &color){
    int r = color.mid(0,2).toInt(nullptr,16);
    int g = color.mid(2,2).toInt(nullptr,16);
    int b = color.mid(4,2).toInt(nullptr,16);
    int a = color.length()>=8?color.mid(6,2).toInt(nullptr,16):QString("FF").toInt(nullptr,16);
    QString style = QString("rgba(").append(QString::number(r)).append(",")
            .append(QString::number(g)).append(",")
            .append(QString::number(b)).append(",")
            .append(QString::number(a))
            .append(");");
    return style;
}

void Toast::onTimerStayOut()
{
    m_timer->stop();
    m_myWidget->hide();
}
